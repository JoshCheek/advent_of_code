#!/usr/bin/env ruby

def score(num_players, max_marble)
  scores  = Hash.new
  players = num_players.times.map(&:succ)
  players.each { |player| scores[player] = 0 }
  player_queue = players.cycle

  marbles = [0]
  index   = 0
  start   = Time.now
  max_marble.times do |marble|
    if marble % 70_000 == 0
      time = Time.now
      p percent: (marble * 100 / max_marble.to_f).round(2),
        marble: marble, of: max_marble,
        board_size: marbles.size,
        seconds: time-start
      start = time
    end
    marble += 1
    player = player_queue.next

    if marble % 23 == 0
      scores[player] += marble
      index -= 7
      index %= marbles.size
      scores[player] += marbles[index]
      marbles.delete_at index
    else
      index += 2
      index %= marbles.size
      marbles.insert index, marble
    end
  end

  scores.values.max
end

$stdin.each_line do |line|
  num_players, max_marble, expected_score = line.scan(/\d+/).map(&:to_i)
  actual_score = score(num_players, max_marble)
  if expected_score
    p score: actual_score, correct: expected_score == actual_score
  else
    puts actual_score
  end
end
