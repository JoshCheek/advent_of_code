#!/usr/bin/env ruby
map = Hash.new ?.
map[[500, 0]] = ?+

while (line = gets)
  xs, ys = line.scan(/(\w+)=(\d+(?:..\d+)?)/).map { |coord, values|
    values = values.scan(/\d+/).map(&:to_i)
    values << values.first if values.size == 1
    first, last = values
    first.upto(last).map { |value|
      [coord, value]
    }
  }.sort
  xs.map! &:last
  ys.map! &:last
  xs << xs.last while xs.size < ys.size
  ys << ys.last while ys.size < xs.size
  xs.zip(ys).each { |x, y| map[[x, y]] = '#' }
end

ymin, ymax = map.keys.map(&:last).minmax
xmin, xmax = map.keys.map(&:first).minmax
xmin -= 1
xmax += 1

# 19.times do |i|
#   ymax.downto(ymin) do |y|
#     xmin.upto(xmax) do |x|
#       # $count = true if i == 18 && map[[x, y]] == '|' && map[[x, y+1]] == '~'
#       # if $count
#       #   (ymin..ymin+5).map do |y|
#       #     (xmin..xmax).map { |x| map[[x, y]] }.join
#       #   end + [""]
#       #   # =>
#       # end
#
#       case map[[x, y]]
#       when ?|
#         if y == ymax # stay put if falling off the edge
#         elsif map[[x, y+1]] == ?. # fall down if it can
#           map[[x, y+1]] = ?|
#           map[[x, y]] = ?.
#         elsif map[[x, y+1]] == ?| # stay put if it's falling off the edge
#         elsif map[[x-1, y]] == ?. && map[[x-1, y-1]] != ?| # float left if it can && water isnt' about to fall down
#           map[[x-1, y]] = ?|
#           map[[x, y]] = ?.
#         elsif map[[x+1, y]] == ?. # float right if it can
#           map[[x+1, y]] = ?|
#           map[[x, y]] = ?.
#         else
#           map[[x, y]] = ?~
#         end
#       when ?+
#         if map[[x, y+1]] == ?. # fall down if it can
#           map[[x, y+1]] = ?|
#         elsif map[[x, y+1]] == ?| # stay put if it's falling off the edge
#         elsif map[[x-1, y]] == ?. # float left if it can
#           map[[x-1, y]] = ?|
#         elsif map[[x+1, y]] == ?. # fall right if it can
#           map[[x+1, y]] = ?|
#         end
#       end
#     end
#   end
# end

# define_method :drip do |x, y|
#   if x > xmax || y > ymax || x < xmin || y < ymin
#     false
#   elsif map[[x, y]] == ?.
#     map[[x, y]] = ?|
#     true
#   elsif map[[x, y]] == ?~ || map[[x, y]] == ?#
#     false
#   elsif drip(x, y+1)
#     true
#   elsif drip(x-1, y)
#     true
#   elsif map[[x+1, y]] == ?.
#     drip x+1, y
#   elsif map[[x+1, y+1]] == ?# || map[[x+1, y+1]] == ?~
#     map[[x, y]] = ?~
#     false
#
#     dripped =  || drip(x-1, y) || drip(x+1, y)
#     map[[x, y]] = ?~ if !dripped && map[[x, y]] == ?# || map[[x, y]] == ?~
#     dripped
#   end
# end

define_method :faucet do |x, y, from|
  return true if x > xmax || y > ymax || x < xmin || y < ymin

  case map[[x, y]]
  when ?#
    false
  when ?+
    faucet x, y+1, :up
  when ?.
    map[[x, y]] = ?|
    case from
    when :up
      if faucet(x, y+1, :up)
        true
      elsif faucet(x-1, y, :right) | faucet(x+1, y, :left)
        true
      else
        map[[x, y]] = ?~
        false
      end
    when :right
      if faucet(x, y+1, :up)
        true
      elsif faucet(x-1, y, :right)
        true
      else
        map[[x, y]] = ?~
        false
      end
    when :left
      if faucet(x, y+1, :up)
        true
      elsif faucet(x+1, y, :left)
        true
      else
        map[[x, y]] = ?~
        false
      end
    end
  end
end

faucet 500, 0, :up

sum = (ymin..ymax).sum do |y|
  (xmin..xmax).count { |x| map[[x, y]] == ?~ || map[[x, y]] == ?| }
end
p sum # => 57

if xmax - xmin < 20
  (ymin..ymax).map do |y|
    puts (xmin..xmax).map { |x| map[[x, y]] }.join
  end
end
# => ["......+.......",
#     "......|.....#.",
#     ".#..#~|||...#.",
#     ".#..#~~#|.....",
#     ".#..#~~#|.....",
#     ".#~~~~~#|.....",
#     ".#~~~~~#|.....",
#     ".#######|.....",
#     "........|.....",
#     "...|||||||||..",
#     "...|#~~~~~#|..",
#     "...|#~~~~~#|..",
#     "...|#~~~~~#|..",
#     "...|#######|.."]

