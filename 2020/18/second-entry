#!/usr/bin/env ruby
def parse_expr(tokens)
  tree, tokens = parse_multiplication(tokens)
  return tree, tokens if tree

  tree, tokens = parse_addition(tokens)
  return tree, tokens if tree

  tree, tokens = parse_paren_expr(tokens)
  return tree, tokens if tree

  tree, tokens = parse_number(tokens)
  return tree, tokens if tree

  return nil, tokens
end

def parse_addition(tokens)
  ts = tokens.dup
  lhs, ts = parse_paren_expr(ts)
  lhs, ts = parse_number(ts) unless lhs
  exprs = [:+, lhs]
  while ts.first == '+'
    ts.shift
    rhs, ts = parse_paren_expr(ts)
    rhs, ts = parse_number(ts) unless rhs
    exprs.push rhs if rhs
  end
  return nil, tokens unless exprs.size > 2
  return exprs, ts
end

def parse_multiplication(tokens)
  ts = tokens.dup
  lhs, ts = parse_addition(ts)
  lhs, ts = parse_paren_expr(ts) unless lhs
  lhs, ts = parse_number(ts) unless lhs
  exprs = [:*, lhs]
  while ts.first == '*'
    ts.shift
    rhs, ts = parse_addition(ts)
    rhs, ts = parse_paren_expr(ts) unless rhs
    rhs, ts = parse_number(ts) unless rhs
    exprs.push rhs if rhs
  end
  return nil, tokens unless exprs.size > 2
  return exprs, ts
end

def parse_paren_expr(tokens)
  ts = tokens.dup
  return nil, tokens unless ts.first == '('
  open = ts.shift
  tree, ts = parse_expr(ts)
  return nil, tokens unless ts.first == ')'
  ts.shift
  return tree, ts
end

def parse_number(tokens)
  return nil, tokens unless tokens.first =~ /[0-9]/
  ts = tokens.dup
  return ts.shift.to_i, ts
end

def evaluate(tree)
  return tree if tree.is_a? Integer
  operator, *operands = tree
  operands.map { |operand| evaluate operand }.reduce(operator)
end

p ARGF.map { |line|
  next if line.start_with? '#'
  input = line.chomp.gsub(" ", "").chars
  tree, tokens = parse_expr input
  evaluate tree
}.sum
