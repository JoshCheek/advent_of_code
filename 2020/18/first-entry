#!/usr/bin/env ruby
def parse_expr(tokens)
  tree, tokens = parse_number(tokens)
  tree, tokens = parse_paren_expr(tokens) unless tree
  return tree, tokens unless tree
  parse_rhs(tree, tokens)
end

def parse_rhs(lhs, tokens)
  ts = tokens.dup
  return lhs, tokens unless ts.first == '+' || ts.first == '*'
  operator = ts.shift.intern
  rhs, ts = parse_number(ts)
  rhs, ts = parse_paren_expr(ts) unless rhs
  return lhs, tokens unless rhs
  parse_rhs([operator, lhs, rhs], ts)
end

def parse_paren_expr(tokens)
  ts = tokens.dup
  return nil, tokens unless ts.first == '('
  open = ts.shift
  tree, ts = parse_expr(ts)
  return nil, tokens unless ts.first == ')'
  ts.shift
  return tree, ts
end

def parse_number(tokens)
  return nil, tokens unless tokens.first =~ /[0-9]/
  ts = tokens.dup
  return ts.shift.to_i, ts
end

def evaluate(tree)
  return tree if tree.is_a? Integer
  operator, left, right = tree
  evaluate(left).public_send(operator, evaluate(right))
end

p ARGF.map { |line|
  input = line.chomp.gsub(" ", "").chars
  tree, tokens = parse_expr input
  evaluate tree
}.sum
