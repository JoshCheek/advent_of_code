#!/usr/bin/env ruby
Marble = Struct.new :value, :pred, :succ do
  def initialize(value, pred=self, succ=self)
    super value, pred, succ
  end

  def delete
    pred = self.pred
    succ = self.succ
    pred.succ = succ
    succ.pred = pred
    return succ
  end

  def insert(value)
    pred     = self.pred
    succ     = self.succ
    inserted = Marble.new value, pred, self
    pred.succ = inserted
    self.pred = inserted
    inserted
  end

  def rotate(n)
    return self if n.zero?
    return succ.rotate n-1 if n.positive?
    return pred.rotate n+1
  end

  def inspect
    crnt = self
    inspected = "#{value}"
    loop do
      crnt = crnt.succ
      break if crnt == self
      inspected << " #{crnt.value}"
    end
    inspected
  end
end

def score(num_players, max_marble)
  scores  = Hash.new
  players = num_players.times.map(&:succ)
  players.each { |player| scores[player] = 0 }
  player_queue = players.cycle

  marbles = Marble.new 0
  marbles.pred = marbles.succ = marbles

  start = Time.now
  max_marble.times do |value|
    value += 1
    if value % 70_000 == 0
      time = Time.now
      p percent: (value * 100 / max_marble.to_f).round(2),
        marble: value, of: max_marble,
        board_size: marbles.size,
        seconds: time-start
      start = time
    end

    player = player_queue.next

    if value % 23 == 0
      scores[player] += value
      marbles = marbles.rotate -7
      scores[player] += marbles.value
      marbles = marbles.delete
    else
      marbles = marbles.rotate(2).insert(value)
    end
  end

  scores.values.max
end

$stdin.each_line do |line|
  num_players, max_marble, expected_score = line.scan(/\d+/).map(&:to_i)
  actual_score = score(num_players, max_marble)
  if expected_score
    p score: actual_score, correct: expected_score == actual_score
  else
    puts actual_score
  end
end
