#!/usr/bin/env ruby

def power_level(x, y, serial_number)
  rack_id = x + 10
  power_level = y * rack_id
  power_level += serial_number
  power_level *= rack_id
  power_level = power_level.digits[2] || 0
  power_level -= 5
  power_level
end

power_level 3, 5, 8      # => 4
power_level 122, 79, 57  # => -5
power_level 217, 196, 39 # => 0
power_level 101, 153, 71 # => 4

def build_grid(serial_number)
  1.upto(300).map do |y|
    1.upto(300).map do |x|
      power_level(x, y, serial_number)
    end
  end
end

def sums_for(nums, size)
  sums = []
  x    = 0
  sum  = 0
  size.times {
    sum += nums[x]
    x += 1
  }
  sums << sum
  while x < nums.size
    sum -= nums[x-size]
    sum += nums[x]
    sums << sum
    x += 1
  end
  sums
end

def find_best(sums_by_col)
  best_x = best_y = nil
  best = -Float::INFINITY
  sums_by_col.each_with_index do |colsums, x|
    colsums.each_with_index do |sum, y|
      next unless best < sum
      best, best_x, best_y = sum, x, y
    end
  end
  [best_x+1, best_y+1, best]
end

def find_best_by_size(grid, size)
  sums_by_col =
    grid.map { |row| sums_for row, size }
        .transpose
        .map { |col| sums_for col, size }
  find_best sums_by_col
end

def find_best_for_all_sizes(grid)
  best_x = best_y = best_size = nil
  best = -Float::INFINITY
  1.upto(300).map do |size|
    x, y, sum = find_best_by_size(grid, size)
    next unless best < sum
    best, best_size, best_x, best_y = sum, size, x, y
  end
  [best_x, best_y, best_size, best]
end

grid = build_grid 8868

# part 1
x, y, sum = find_best_by_size(grid, 3)  # => [241, 40, 30]
puts "#{x},#{y}"

# part 2
x, y, size, sum = find_best_for_all_sizes(grid) # => [166, 75, 12, 71]
puts "#{x},#{y},#{size}"

# >> 241,40
# >> 166,75,12
