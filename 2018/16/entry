#!/usr/bin/env ruby

class Instruction
  def initialize(name, &impl)
    @name = name
    @impl = impl
  end

  def inspect
    "#<Instruction #@name>"
  end

  def call(registers, a, b, c)
    registers = registers.dup
    @impl.call registers, a, b, c
    registers
  end
end

Instruction::ALL = [
  addr = Instruction.new("ADDR") { |rs, a, b, c| rs[c] = rs[a] + rs[b] },
  addi = Instruction.new("ADDI") { |rs, a, b, c| rs[c] = rs[a] + b     },
  mulr = Instruction.new("MULR") { |rs, a, b, c| rs[c] = rs[a] * rs[b] },
  muli = Instruction.new("MULI") { |rs, a, b, c| rs[c] = rs[a] * b     },
  banr = Instruction.new("BANR") { |rs, a, b, c| rs[c] = rs[a] & rs[b] },
  bani = Instruction.new("BANI") { |rs, a, b, c| rs[c] = rs[a] & b     },
  borr = Instruction.new("BORR") { |rs, a, b, c| rs[c] = rs[a] | rs[b] },
  bori = Instruction.new("BORI") { |rs, a, b, c| rs[c] = rs[a] | b     },
  setr = Instruction.new("SETR") { |rs, a, b, c| rs[c] = rs[a]         },
  seti = Instruction.new("SETI") { |rs, a, b, c| rs[c] = a             },
  gtir = Instruction.new("GTIR") { |rs, a, b, c| rs[c] =    a  >  rs[b] ? 1 : 0 },
  gtri = Instruction.new("GTRI") { |rs, a, b, c| rs[c] = rs[a] >      b ? 1 : 0 },
  gtrr = Instruction.new("GTRR") { |rs, a, b, c| rs[c] = rs[a] >  rs[b] ? 1 : 0 },
  eqir = Instruction.new("EQIR") { |rs, a, b, c| rs[c] =    a  == rs[b] ? 1 : 0 },
  eqri = Instruction.new("EQRI") { |rs, a, b, c| rs[c] = rs[a] ==     b ? 1 : 0 },
  eqrr = Instruction.new("EQRR") { |rs, a, b, c| rs[c] = rs[a] == rs[b] ? 1 : 0 },
]

def potential_opcodes(before, after, (_op, a, b, c))
  Instruction::ALL.select do |instruction|
    after == instruction.call(before, a, b, c)
  end
end

example_potentials = File
  .read(File.join(__dir__, 'input1'))
  .scan(/\d+/)
  .map(&:to_i)
  .each_slice(4)
  .each_slice(3)
  .map { |before, instruction, after|
    opcode = instruction[0]
    [opcode, potential_opcodes(before, after, instruction)]
  }

# Part 1
p example_potentials.count { |_, instrs| instrs.size >= 3 }
# => 642

# Part 2
potentials = example_potentials
  .group_by(&:first)
  .map { |opcode, results|
    [opcode, results.map(&:last).reduce(Instruction::ALL, :&)]
  }
  .sort
  .to_h

10.times do
  potentials.each do |opcode, instructions|
    next unless instructions.one?
    potentials.each do |opcode1, instructions2|
      instructions2.delete instructions.first unless opcode == opcode1
    end
  end
end
Instruction::BY_OPCODE = potentials.transform_values(&:first)
# => {0=>#<Instruction EQIR>,
#     1=>#<Instruction ADDI>,
#     2=>#<Instruction GTIR>,
#     3=>#<Instruction SETR>,
#     4=>#<Instruction MULR>,
#     5=>#<Instruction SETI>,
#     6=>#<Instruction MULI>,
#     7=>#<Instruction EQRI>,
#     8=>#<Instruction BORI>,
#     9=>#<Instruction BANI>,
#     10=>#<Instruction GTRR>,
#     11=>#<Instruction EQRR>,
#     12=>#<Instruction ADDR>,
#     13=>#<Instruction GTRI>,
#     14=>#<Instruction BORR>,
#     15=>#<Instruction BANR>}

p File
  .read(File.join(__dir__, 'input2'))
  .scan(/\d+/)
  .map(&:to_i)
  .each_slice(4)
  .reduce([0, 0, 0, 0]) { |registers, (opcode, a, b, c)|
    Instruction::BY_OPCODE[opcode].call(registers, a, b, c)
  }      # => [481, 481, 3, 0]
  .first # => 481

# >> 642
# >> 481
